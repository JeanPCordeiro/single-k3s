---
apiVersion: v1
kind: Namespace
metadata:
  name: ${NAMESITE}
---
#
# MySQL Secret
#
apiVersion: v1
kind: Secret
metadata:
  name: wp-db-secrets
  namespace: ${NAMESITE}
type: Opaque
data:
  MYSQL_ROOT_PASSWORD: QExuc3M5NzAwISE=
---
#
# MySQL PVC
#
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-volume
  namespace: ${NAMESITE}
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
#
# MySQL Deployment
#
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  namespace: ${NAMESITE}
  labels:
    app: mysql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - name: database
          image: mysql:5.7
          args:
            # mount volume
            - "--ignore-db-dir=lost+found"
          # add root password
          envFrom:
            - secretRef:
                name: wp-db-secrets
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: mysql-initdb
              mountPath: /docker-entrypoint-initdb.d
            - name: mysql-data
              mountPath: /var/lib/mysql
      volumes:
        - name: mysql-initdb
          configMap:
            name: mysql-initdb-config
        - name: mysql-data
          persistentVolumeClaim:
            claimName: mysql-volume
---
#
# MySQL Init DataBase
#
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-initdb-config
  namespace: ${NAMESITE}
data:
  init.sql: |
    CREATE DATABASE IF NOT EXISTS wordpress;
---
#
# MySQL Service
#
apiVersion: v1
kind: Service
metadata:
  name: mysql-service
  namespace: ${NAMESITE}
spec:
  ports:
    - port: 3306
      protocol: TCP
  selector:
    app: mysql
---
#
# WP PVC
#
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: wordpress-volume
  namespace: ${NAMESITE}
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
---
#
# WP Deployment
#
apiVersion: apps/v1
kind: Deployment
metadata:
  name: wordpress
  namespace: ${NAMESITE}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: wordpress
  template:
    metadata:
      labels:
        app: wordpress
    spec:
      containers:
        - name: wordpress
          image: wordpress:5.8.3-php7.4-apache
          ports:
            - containerPort: 80
              name: wordpress
          volumeMounts:
            - name: wordpress-data
              mountPath: /var/www
          env:
            - name: WORDPRESS_DB_HOST
              value: mysql-service
            - name: WORDPRESS_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: wp-db-secrets
                  key: MYSQL_ROOT_PASSWORD
            - name: WORDPRESS_DB_USER
              value: root
            - name: WORDPRESS_DB_NAME
              value: wordpress
      volumes:
        - name: wordpress-data
          persistentVolumeClaim:
            claimName: wordpress-volume
---
#
# WP Service
#
kind: Service
apiVersion: v1
metadata:
  name: wordpress-service
  namespace: ${NAMESITE}
spec:
  selector:
    app: wordpress
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 80
---
#
# WP Ingress
#
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: wordpress-ingress
  namespace: ${NAMESITE}
  annotations:
    kubernetes.io/ingress.class: traefik
    cert-manager.io/cluster-issuer: letsencrypt-prod
    traefik.ingress.kubernetes.io/router.middlewares: default-redirect-https@kubernetescrd
spec:
  rules:
    - host: ${DOMAIN}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: wordpress-service
                port:
                  number: 80
  tls:
    - secretName: wordpress-tls
      hosts:
        - ${DOMAIN}
